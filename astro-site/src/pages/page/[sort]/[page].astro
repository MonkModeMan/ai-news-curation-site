---
// pages/page/[sort]/[page].astro
import Layout from "../../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import ArticleCard from "../../../components/ArticleCard.astro";

const PAGE_SIZE = 30;
const { sort, page } = Astro.params;
const currentPage = parseInt(page || "1");

const q = Astro.url?.searchParams.get("q")?.toLowerCase() ?? "";
const allPosts = await getCollection("posts");

// 検索フィルター
const filtered = allPosts.filter(post =>
  post.data.title.toLowerCase().includes(q) ||
  post.data.description.toLowerCase().includes(q) ||
  (post.body && post.body.toLowerCase().includes(q))
);

// 並び順
const sorted = sort === "source"
  ? [...filtered].sort((a, b) => a.data.source.localeCompare(b.data.source))
  : [...filtered].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate)).reverse();

const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
const paginatedPosts = sorted.slice((currentPage - 1) * PAGE_SIZE, currentPage * PAGE_SIZE);
---

<Layout currentPage={currentPage} totalPages={totalPages} sort={sort}>
  <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
    {paginatedPosts.map((post) => (
      <ArticleCard
        title={post.data.title}
        pubDate={post.data.pubDate}
        description={post.data.description}
        media={post.data.source}
        thumbnail={post.data.thumbnail}
        url={post.data.url}
      />
    ))}
  </div>
</Layout>
