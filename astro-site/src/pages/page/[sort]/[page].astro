---
// [page].astro
// ✅ 固定ページ数
const PAGE_SIZE = 30;

import { getCollection } from "astro:content";
import ArticleCard from "../../components/ArticleCard.astro";

// ✅ getStaticPaths 定義：ページごとにルート生成
export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  const totalPages = Math.ceil(allPosts.length / PAGE_SIZE);

  return Array.from({ length: totalPages }).map((_, i) => ({
    params: { page: String(i + 1) },
  }));
}

// ✅ ページ番号と記事分割
const { page } = Astro.params;
const currentPage = parseInt(page);
const allPosts = await getCollection("posts");
const sortedPosts = allPosts.sort(
  (a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate)
);

const start = (currentPage - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;
const paginatedPosts = sortedPosts.slice(start, end);
const totalPages = Math.ceil(allPosts.length / PAGE_SIZE);
---

<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>AIニュースまとめ - ページ {page}</title>
  </head>
  <body class="bg-gray-100 text-gray-800">
    <main class="max-w-6xl mx-auto px-4 py-8">
      <h1 class="text-2xl font-bold text-sky-500 mb-2">AIニュースまとめ</h1>
      <p class="text-gray-600 text-sm mb-4">
        新着順で表示中（{page}ページ目 / 全{totalPages}ページ）
      </p>

      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {paginatedPosts.map((post) => (
          <ArticleCard {...post.data} />
        ))}
      </div>

      <div class="mt-8 flex justify-between text-sm text-blue-600">
        {currentPage > 1 ? (
          <a href={`/page/${currentPage - 1}`} class="hover:underline">← 前のページ</a>
        ) : <span></span>}

        {currentPage < totalPages ? (
          <a href={`/page/${currentPage + 1}`} class="hover:underline">次のページ →</a>
        ) : <span></span>}
      </div>
    </main>
  </body>
</html>