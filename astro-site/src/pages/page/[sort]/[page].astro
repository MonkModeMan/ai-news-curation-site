---
import { getCollection } from "astro:content";

const PAGE_SIZE = 30;
const { sort, page } = Astro.params;
const currentPage = Number(page || 1);

const allPosts = await getCollection("posts");

const sortedPosts = sort === "source"
  ? [...allPosts].sort((a, b) => a.data.source.localeCompare(b.data.source))
  : [...allPosts].sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const start = (currentPage - 1) * PAGE_SIZE;
const end = currentPage * PAGE_SIZE;
const paginatedPosts = sortedPosts.slice(start, end);
const totalPages = Math.ceil(sortedPosts.length / PAGE_SIZE);
---

<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>ページ {page}</title>
  </head>
  <body>
    <main>
      <ul>
        {paginatedPosts.map((post) => (
          <li><a href={post.data.link} target="_blank">{post.data.title}</a></li>
        ))}
      </ul>
    </main>
  </body>
</html>

export async function getStaticPaths() {
  const PAGE_SIZE = 30;
  const allPosts = await import("astro:content").then(m => m.getCollection("posts"));

  const sorts = ["date", "source"];
  const paths = [];

  for (const sort of sorts) {
    const sorted =
      sort === "source"
        ? [...allPosts].sort((a, b) => a.data.source.localeCompare(b.data.source))
        : [...allPosts].sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

    const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
    for (let i = 1; i <= totalPages; i++) {
      paths.push({ params: { sort, page: String(i) } });
    }
  }

  return paths;
}
