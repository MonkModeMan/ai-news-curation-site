---
import { getCollection } from "astro:content";
import ArticleCard from "../../../components/ArticleCard.astro";

// ✅ getStaticPaths の中で PAGE_SIZE を定義！
export async function getStaticPaths() {
  const PAGE_SIZE = 30;
  const allPosts = await getCollection("posts");
  const sorts = ["date", "source"];
  const paths = [];

  for (const sort of sorts) {
    const sorted = sort === "source"
      ? [...allPosts].sort((a, b) => a.data.source.localeCompare(b.data.source))
      : [...allPosts].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate));

    const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
    for (let i = 1; i <= totalPages; i++) {
      paths.push({ params: { sort, page: String(i) } });
    }
  }

  return paths;
}

// ✅ ページ描画用のデータ取得処理
const PAGE_SIZE = 30;
const { sort, page } = Astro.params;
const currentPage = parseInt(page);
const allPosts = await getCollection("posts");

const sorted = sort === "source"
  ? [...allPosts].sort((a, b) => a.data.source.localeCompare(b.data.source))
  : [...allPosts].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate));

const start = (currentPage - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;
const paginatedPosts = sorted.slice(start, end);
const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
---

<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>AIニュースまとめ - ページ {page}</title>
  </head>
  <body class="bg-gray-100 text-gray-800">
    <main class="max-w-6xl mx-auto px-4 py-8">
      <div class="mb-4">
        <h1 class="text-2xl font-bold text-sky-500 mb-2">AIニュースまとめ</h1>
        <p class="text-gray-600 text-sm">
          並び順: <strong>{sort === "source" ? "ソース別" : "新着順"}</strong>（{page}ページ目 / 全{totalPages}ページ中）
        </p>
      </div>

      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {paginatedPosts.map((post) => (
          <ArticleCard {...post.data} />
        ))}
      </div>

      <div class="mt-8 flex justify-between text-sm text-blue-600">
        {currentPage > 1 ? (
          <a href={`/page/${sort}/${currentPage - 1}`} class="hover:underline">← 前のページ</a>
        ) : <span></span>}

        {currentPage < totalPages ? (
          <a href={`/page/${sort}/${currentPage + 1}`} class="hover:underline">次のページ →</a>
        ) : <span></span>}
      </div>
    </main>
  </body>
</html>
