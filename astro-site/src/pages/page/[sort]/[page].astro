---
// /page/[sort]/[page].astro

import Layout from "../../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import ArticleCard from "../../../components/ArticleCard.astro";

const { sort, page } = Astro.params;
const currentPage = parseInt(page);
const PAGE_SIZE = 30;

const allPosts = await getCollection("posts");

const sorted = sort === "source"
  ? [...allPosts].sort((a, b) => a.data.source.localeCompare(b.data.source))
  : [...allPosts].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate));

const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
const paginated = sorted.slice((currentPage - 1) * PAGE_SIZE, currentPage * PAGE_SIZE);

export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  const sorts = ["date", "source"];
  const paths = [];

  for (const sort of sorts) {
    const sorted = sort === "source"
      ? [...allPosts].sort((a, b) => a.data.source.localeCompare(b.data.source))
      : [...allPosts].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate));

    const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
    for (let i = 1; i <= totalPages; i++) {
      paths.push({ params: { sort, page: String(i) } });
    }
  }

  return paths;
}
---

<Layout currentPage={currentPage} totalPages={totalPages} sort={sort}>
  <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
    {paginated.map((post) => (
      <ArticleCard {...post.data} />
    ))}
  </div>

  {currentPage < totalPages && (
    <div class="mt-8 flex justify-end text-sm text-blue-600">
      <a href={`/page/${sort}/${currentPage + 1}`} class="hover:underline">次のページ →</a>
    </div>
  )}
</Layout>