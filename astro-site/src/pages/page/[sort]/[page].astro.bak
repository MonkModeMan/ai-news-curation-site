---
// pages/page/[sort]/[page].astro
import Layout from "../../../layouts/Layout.astro";
import ArticleCard from "../../../components/ArticleCard.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const PAGE_SIZE = 30;
  const allPosts = await getCollection("posts");

  const sorts = ["date"];
  const paths = [];

  for (const sort of sorts) {
    const sorted = sort === "date"
      ? [...allPosts].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate))
      : allPosts;

    const totalPages = Math.ceil(sorted.length / PAGE_SIZE);
    for (let i = 1; i <= totalPages; i++) {
      paths.push({ params: { sort, page: String(i) } });
    }
  }

  return paths;
}

const PAGE_SIZE = 30;
const { sort, page } = Astro.params;
const currentPage = Number(page);

const allPosts = await getCollection("posts");

// ✅ ソート順
const sortedPosts = sort === "date"
  ? [...allPosts].sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate))
  : allPosts;

// ✅ ページング
const totalPages = Math.ceil(sortedPosts.length / PAGE_SIZE);
const paginatedPosts = sortedPosts.slice(
  (currentPage - 1) * PAGE_SIZE,
  currentPage * PAGE_SIZE
);
---

<Layout currentPage={currentPage} totalPages={totalPages} sort={sort}>
  <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
    {paginatedPosts.map((post) => (
      <ArticleCard
        title={post.data.title}
        pubDate={post.data.pubDate}
        description={post.data.description}
        media={post.data.source}
        thumbnail={post.data.thumbnail}
        url={post.data.url}
      />
    ))}
  </div>
</Layout>